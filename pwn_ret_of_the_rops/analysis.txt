========================
checksec --file=./ret-of-the-rops --output=json
========================
{
    "./ret-of-the-rops": {
        "relro": "partial",
        "canary": "no",
        "nx": "yes",
        "pie": "no",
        "rpath": "no",
        "runpath": "no",
        "symbols": "yes",
        "fortify_source": "no",
        "fortified": "0",
        "fortify-able": "2"
    }
}========================
ROPgadget --binary ./ret-of-the-rops
========================
Gadgets information
============================================================
0x000000000040109d : add ah, dh ; nop ; endbr64 ; ret
0x0000000000401057 : add al, byte ptr [rax] ; add byte ptr [rax], al ; jmp 0x401020
0x000000000040110f : add bh, bh ; loopne 0x401179 ; nop dword ptr [rax + rax] ; ret
0x000000000040126c : add byte ptr [rax], al ; add byte ptr [rax], al ; endbr64 ; ret
0x0000000000401037 : add byte ptr [rax], al ; add byte ptr [rax], al ; jmp 0x401020
0x00000000004011f8 : add byte ptr [rax], al ; add byte ptr [rax], al ; leave ; ret
0x00000000004011f9 : add byte ptr [rax], al ; add cl, cl ; ret
0x000000000040113a : add byte ptr [rax], al ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x000000000040126e : add byte ptr [rax], al ; endbr64 ; ret
0x000000000040109c : add byte ptr [rax], al ; hlt ; nop ; endbr64 ; ret
0x0000000000401039 : add byte ptr [rax], al ; jmp 0x401020
0x00000000004011fa : add byte ptr [rax], al ; leave ; ret
0x0000000000401034 : add byte ptr [rax], al ; push 0 ; jmp 0x401020
0x0000000000401044 : add byte ptr [rax], al ; push 1 ; jmp 0x401020
0x0000000000401054 : add byte ptr [rax], al ; push 2 ; jmp 0x401020
0x0000000000401064 : add byte ptr [rax], al ; push 3 ; jmp 0x401020
0x0000000000401116 : add byte ptr [rax], al ; ret
0x000000000040100d : add byte ptr [rax], al ; test rax, rax ; je 0x401016 ; call rax
0x0000000000401115 : add byte ptr [rax], r8b ; ret
0x000000000040113b : add byte ptr [rcx], al ; pop rbp ; ret
0x00000000004011fb : add cl, cl ; ret
0x0000000000401047 : add dword ptr [rax], eax ; add byte ptr [rax], al ; jmp 0x401020
0x000000000040113c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x0000000000401137 : add eax, 0x2f4b ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x0000000000401067 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; jmp 0x401020
0x0000000000401017 : add esp, 8 ; ret
0x0000000000401016 : add rsp, 8 ; ret
0x00000000004011b3 : call qword ptr [rax + 0x4855c35d]
0x0000000000401014 : call rax
0x0000000000401153 : cli ; jmp 0x4010e0
0x00000000004010a3 : cli ; ret
0x000000000040127b : cli ; sub rsp, 8 ; add rsp, 8 ; ret
0x0000000000401150 : endbr64 ; jmp 0x4010e0
0x00000000004010a0 : endbr64 ; ret
0x000000000040124c : fisttp word ptr [rax - 0x7d] ; ret
0x0000000000401042 : fisubr dword ptr [rdi] ; add byte ptr [rax], al ; push 1 ; jmp 0x401020
0x000000000040109e : hlt ; nop ; endbr64 ; ret
0x000000000040122a : in al, dx ; or al, ch ; iretd
0x000000000040122d : iretd
0x0000000000401012 : je 0x401016 ; call rax
0x00000000004010c7 : je 0x4010d0 ; mov edi, 0x404048 ; jmp rax
0x0000000000401109 : je 0x401118 ; mov edi, 0x404048 ; jmp rax
0x000000000040103b : jmp 0x401020
0x0000000000401154 : jmp 0x4010e0
0x00000000004010ce : jmp rax
0x00000000004011fc : leave ; ret
0x0000000000401032 : loop 0x401063 ; add byte ptr [rax], al ; push 0 ; jmp 0x401020
0x000000000040100b : loope 0x40103c ; add byte ptr [rax], al ; test rax, rax ; je 0x401016 ; call rax
0x0000000000401111 : loopne 0x401179 ; nop dword ptr [rax + rax] ; ret
0x0000000000401136 : mov byte ptr [rip + 0x2f4b], 1 ; pop rbp ; ret
0x00000000004011f7 : mov eax, 0 ; leave ; ret
0x00000000004010c9 : mov edi, 0x404048 ; jmp rax
0x000000000040109f : nop ; endbr64 ; ret
0x00000000004011b4 : nop ; pop rbp ; ret
0x000000000040113f : nop ; ret
0x0000000000401113 : nop dword ptr [rax + rax] ; ret
0x000000000040114c : nop dword ptr [rax] ; endbr64 ; jmp 0x4010e0
0x0000000000401112 : nop word ptr [rax + rax] ; ret
0x000000000040122b : or al, ch ; iretd
0x000000000040125c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000040125e : pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000401260 : pop r14 ; pop r15 ; ret
0x0000000000401262 : pop r15 ; ret
0x000000000040125b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000040125f : pop rbp ; pop r14 ; pop r15 ; ret
0x000000000040113d : pop rbp ; ret
0x0000000000401263 : pop rdi ; ret
0x0000000000401261 : pop rsi ; pop r15 ; ret
0x000000000040125d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000401036 : push 0 ; jmp 0x401020
0x0000000000401046 : push 1 ; jmp 0x401020
0x0000000000401056 : push 2 ; jmp 0x401020
0x0000000000401066 : push 3 ; jmp 0x401020
0x000000000040101a : ret
0x0000000000401062 : retf 0x2f
0x0000000000401192 : retf 0xfffe
0x0000000000401011 : sal byte ptr [rdx + rax - 1], 0xd0 ; add rsp, 8 ; ret
0x0000000000401052 : shr byte ptr [rdi], cl ; add byte ptr [rax], al ; push 2 ; jmp 0x401020
0x000000000040127d : sub esp, 8 ; add rsp, 8 ; ret
0x000000000040127c : sub rsp, 8 ; add rsp, 8 ; ret
0x0000000000401010 : test eax, eax ; je 0x401016 ; call rax
0x00000000004010c5 : test eax, eax ; je 0x4010d0 ; mov edi, 0x404048 ; jmp rax
0x0000000000401107 : test eax, eax ; je 0x401118 ; mov edi, 0x404048 ; jmp rax
0x000000000040100f : test rax, rax ; je 0x401016 ; call rax

Unique gadgets found: 84
========================
gdb -nx -q -batch -ex "info functions" ./ret-of-the-rops
========================
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  puts@plt
0x0000000000401040  printf@plt
0x0000000000401050  gets@plt
0x0000000000401060  setvbuf@plt
0x0000000000401070  _start
0x00000000004010a0  _dl_relocate_static_pie
0x00000000004010b0  deregister_tm_clones
0x00000000004010e0  register_tm_clones
0x0000000000401120  __do_global_dtors_aux
0x0000000000401150  frame_dummy
0x0000000000401156  ignore_me_init_buffering
0x00000000004011b7  main
0x0000000000401200  __libc_csu_init
0x0000000000401270  __libc_csu_fini
0x0000000000401278  _fini
========================
objdump -R ./ret-of-the-rops
========================

./ret-of-the-rops:     file format elf64-x86-64

DYNAMIC RELOCATION RECORDS
OFFSET           TYPE              VALUE
0000000000403fe0 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable
0000000000403fe8 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5
0000000000403ff0 R_X86_64_GLOB_DAT  __gmon_start__
0000000000403ff8 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable
0000000000404060 R_X86_64_COPY     stdout@GLIBC_2.2.5
0000000000404070 R_X86_64_COPY     stdin@GLIBC_2.2.5
0000000000404080 R_X86_64_COPY     stderr@GLIBC_2.2.5
0000000000404018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5
0000000000404020 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.5
0000000000404028 R_X86_64_JUMP_SLOT  gets@GLIBC_2.2.5
0000000000404030 R_X86_64_JUMP_SLOT  setvbuf@GLIBC_2.2.5


