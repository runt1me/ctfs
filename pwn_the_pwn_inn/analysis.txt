========================
checksec --file=./the-pwn-inn --output=json
========================
{
    "./the-pwn-inn": {
        "relro": "partial",
        "canary": "yes",
        "nx": "yes",
        "pie": "no",
        "rpath": "no",
        "runpath": "no",
        "symbols": "yes",
        "fortify_source": "no",
        "fortified": "0",
        "fortify-able": "2"
    }
}========================
ROPgadget --binary ./the-pwn-inn
========================
Gadgets information
============================================================
0x00000000004010ed : add ah, dh ; nop ; endbr64 ; ret
0x0000000000401077 : add al, 0 ; add byte ptr [rax], al ; jmp 0x401020
0x0000000000401057 : add al, byte ptr [rax] ; add byte ptr [rax], al ; jmp 0x401020
0x00000000004012a7 : add al, ch ; ret
0x000000000040115f : add bh, bh ; loopne 0x4011c9 ; nop dword ptr [rax + rax] ; ret
0x00000000004012a5 : add byte ptr [rax], al ; add al, ch ; ret
0x00000000004013fc : add byte ptr [rax], al ; add byte ptr [rax], al ; endbr64 ; ret
0x0000000000401037 : add byte ptr [rax], al ; add byte ptr [rax], al ; jmp 0x401020
0x000000000040118a : add byte ptr [rax], al ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x00000000004013fe : add byte ptr [rax], al ; endbr64 ; ret
0x00000000004010ec : add byte ptr [rax], al ; hlt ; nop ; endbr64 ; ret
0x0000000000401039 : add byte ptr [rax], al ; jmp 0x401020
0x0000000000401034 : add byte ptr [rax], al ; push 0 ; jmp 0x401020
0x0000000000401044 : add byte ptr [rax], al ; push 1 ; jmp 0x401020
0x0000000000401054 : add byte ptr [rax], al ; push 2 ; jmp 0x401020
0x0000000000401064 : add byte ptr [rax], al ; push 3 ; jmp 0x401020
0x0000000000401074 : add byte ptr [rax], al ; push 4 ; jmp 0x401020
0x0000000000401084 : add byte ptr [rax], al ; push 5 ; jmp 0x401020
0x0000000000401094 : add byte ptr [rax], al ; push 6 ; jmp 0x401020
0x00000000004010a4 : add byte ptr [rax], al ; push 7 ; jmp 0x401020
0x00000000004010b4 : add byte ptr [rax], al ; push 8 ; jmp 0x401020
0x0000000000401166 : add byte ptr [rax], al ; ret
0x000000000040100d : add byte ptr [rax], al ; test rax, rax ; je 0x401016 ; call rax
0x0000000000401165 : add byte ptr [rax], r8b ; ret
0x000000000040118b : add byte ptr [rcx], al ; pop rbp ; ret
0x00000000004010eb : add byte ptr cs:[rax], al ; hlt ; nop ; endbr64 ; ret
0x0000000000401047 : add dword ptr [rax], eax ; add byte ptr [rax], al ; jmp 0x401020
0x000000000040118c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x0000000000401187 : add eax, 0x2f1b ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x000000000040137c : add eax, 0xfffccee8 ; dec ecx ; ret
0x00000000004012bc : add eax, 0xfffd8ee8 ; dec ecx ; ret
0x0000000000401273 : add eax, 0xfffdd7e8 ; dec ecx ; ret
0x0000000000401226 : add eax, 0xfffe24e8 ; dec ecx ; ret
0x0000000000401067 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; jmp 0x401020
0x0000000000401017 : add esp, 8 ; ret
0x0000000000401016 : add rsp, 8 ; ret
0x0000000000401216 : call qword ptr [rax - 0x7ba74b8]
0x0000000000401327 : call qword ptr [rbp + 0x48]
0x0000000000401014 : call rax
0x00000000004011a3 : cli ; jmp 0x401130
0x00000000004010f3 : cli ; ret
0x000000000040140b : cli ; sub rsp, 8 ; add rsp, 8 ; ret
0x000000000040122b : dec ecx ; ret
0x00000000004011a0 : endbr64 ; jmp 0x401130
0x00000000004010f0 : endbr64 ; ret
0x00000000004013dc : fisttp word ptr [rax - 0x7d] ; ret
0x0000000000401042 : fisubr dword ptr [rdi] ; add byte ptr [rax], al ; push 1 ; jmp 0x401020
0x00000000004010ee : hlt ; nop ; endbr64 ; ret
0x0000000000401012 : je 0x401016 ; call rax
0x0000000000401117 : je 0x401120 ; mov edi, 0x404070 ; jmp rax
0x0000000000401159 : je 0x401168 ; mov edi, 0x404070 ; jmp rax
0x000000000040103b : jmp 0x401020
0x00000000004011a4 : jmp 0x401130
0x000000000040111e : jmp rax
0x000000000040122c : leave ; ret
0x0000000000401032 : loop 0x401063 ; add byte ptr [rax], al ; push 0 ; jmp 0x401020
0x000000000040100b : loope 0x40103c ; add byte ptr [rax], al ; test rax, rax ; je 0x401016 ; call rax
0x0000000000401161 : loopne 0x4011c9 ; nop dword ptr [rax + rax] ; ret
0x0000000000401186 : mov byte ptr [rip + 0x2f1b], 1 ; pop rbp ; ret
0x0000000000401092 : mov dl, 0x2f ; add byte ptr [rax], al ; push 6 ; jmp 0x401020
0x0000000000401119 : mov edi, 0x404070 ; jmp rax
0x00000000004010b2 : movabs byte ptr [0x86800002f], al ; jmp 0x401020
0x00000000004010ef : nop ; endbr64 ; ret
0x000000000040118f : nop ; ret
0x0000000000401163 : nop dword ptr [rax + rax] ; ret
0x000000000040119c : nop dword ptr [rax] ; endbr64 ; jmp 0x401130
0x0000000000401162 : nop word ptr [rax + rax] ; ret
0x00000000004010b7 : or byte ptr [rax], al ; add byte ptr [rax], al ; jmp 0x401020
0x00000000004013ec : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004013ee : pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004013f0 : pop r14 ; pop r15 ; ret
0x00000000004013f2 : pop r15 ; ret
0x00000000004013eb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004013ef : pop rbp ; pop r14 ; pop r15 ; ret
0x000000000040118d : pop rbp ; ret
0x00000000004013f3 : pop rdi ; ret
0x00000000004013f1 : pop rsi ; pop r15 ; ret
0x00000000004013ed : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000401036 : push 0 ; jmp 0x401020
0x0000000000401046 : push 1 ; jmp 0x401020
0x0000000000401056 : push 2 ; jmp 0x401020
0x0000000000401066 : push 3 ; jmp 0x401020
0x0000000000401076 : push 4 ; jmp 0x401020
0x0000000000401086 : push 5 ; jmp 0x401020
0x0000000000401096 : push 6 ; jmp 0x401020
0x00000000004010a6 : push 7 ; jmp 0x401020
0x00000000004010b6 : push 8 ; jmp 0x401020
0x000000000040101a : ret
0x0000000000401072 : ret 0x2f
0x0000000000401062 : retf 0x2f
0x0000000000401011 : sal byte ptr [rdx + rax - 1], 0xd0 ; add rsp, 8 ; ret
0x0000000000401188 : sbb ebp, dword ptr [rdi] ; add byte ptr [rax], al ; add dword ptr [rbp - 0x3d], ebx ; nop ; ret
0x0000000000401052 : shr byte ptr [rdi], cl ; add byte ptr [rax], al ; push 2 ; jmp 0x401020
0x000000000040140d : sub esp, 8 ; add rsp, 8 ; ret
0x000000000040140c : sub rsp, 8 ; add rsp, 8 ; ret
0x0000000000401010 : test eax, eax ; je 0x401016 ; call rax
0x0000000000401115 : test eax, eax ; je 0x401120 ; mov edi, 0x404070 ; jmp rax
0x0000000000401157 : test eax, eax ; je 0x401168 ; mov edi, 0x404070 ; jmp rax
0x000000000040100f : test rax, rax ; je 0x401016 ; call rax

Unique gadgets found: 99
========================
gdb -nx -q -batch -ex "info functions" ./the-pwn-inn
========================
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  _exit@plt
0x0000000000401040  puts@plt
0x0000000000401050  __stack_chk_fail@plt
0x0000000000401060  printf@plt
0x0000000000401070  alarm@plt
0x0000000000401080  fgets@plt
0x0000000000401090  signal@plt
0x00000000004010a0  setvbuf@plt
0x00000000004010b0  exit@plt
0x00000000004010c0  _start
0x00000000004010f0  _dl_relocate_static_pie
0x0000000000401100  deregister_tm_clones
0x0000000000401130  register_tm_clones
0x0000000000401170  __do_global_dtors_aux
0x00000000004011a0  frame_dummy
0x00000000004011a6  ignore_me_init_buffering
0x000000000040122e  kill_on_timeout
0x000000000040127b  ignore_me_init_signal
0x00000000004012c4  vuln
0x0000000000401328  main
0x0000000000401390  __libc_csu_init
0x0000000000401400  __libc_csu_fini
0x0000000000401408  _fini
========================
objdump -R ./the-pwn-inn
========================

./the-pwn-inn:     file format elf64-x86-64

DYNAMIC RELOCATION RECORDS
OFFSET           TYPE              VALUE
0000000000403fe0 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable
0000000000403fe8 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5
0000000000403ff0 R_X86_64_GLOB_DAT  __gmon_start__
0000000000403ff8 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable
0000000000404080 R_X86_64_COPY     stdout@GLIBC_2.2.5
0000000000404090 R_X86_64_COPY     stdin@GLIBC_2.2.5
00000000004040a0 R_X86_64_COPY     stderr@GLIBC_2.2.5
0000000000404018 R_X86_64_JUMP_SLOT  _exit@GLIBC_2.2.5
0000000000404020 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5
0000000000404028 R_X86_64_JUMP_SLOT  __stack_chk_fail@GLIBC_2.4
0000000000404030 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.5
0000000000404038 R_X86_64_JUMP_SLOT  alarm@GLIBC_2.2.5
0000000000404040 R_X86_64_JUMP_SLOT  fgets@GLIBC_2.2.5
0000000000404048 R_X86_64_JUMP_SLOT  signal@GLIBC_2.2.5
0000000000404050 R_X86_64_JUMP_SLOT  setvbuf@GLIBC_2.2.5
0000000000404058 R_X86_64_JUMP_SLOT  exit@GLIBC_2.2.5


